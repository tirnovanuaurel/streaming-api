/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Live } from "@prisma/client";

export class LiveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LiveCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveCountArgs>
  ): Promise<number> {
    return this.prisma.live.count(args);
  }

  async lives<T extends Prisma.LiveFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFindManyArgs>
  ): Promise<Live[]> {
    return this.prisma.live.findMany(args);
  }
  async live<T extends Prisma.LiveFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFindUniqueArgs>
  ): Promise<Live | null> {
    return this.prisma.live.findUnique(args);
  }
  async createLive<T extends Prisma.LiveCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveCreateArgs>
  ): Promise<Live> {
    return this.prisma.live.create<T>(args);
  }
  async updateLive<T extends Prisma.LiveUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveUpdateArgs>
  ): Promise<Live> {
    return this.prisma.live.update<T>(args);
  }
  async deleteLive<T extends Prisma.LiveDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveDeleteArgs>
  ): Promise<Live> {
    return this.prisma.live.delete(args);
  }
}
