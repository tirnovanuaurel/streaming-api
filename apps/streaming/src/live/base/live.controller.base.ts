/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LiveService } from "../live.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LiveCreateInput } from "./LiveCreateInput";
import { Live } from "./Live";
import { LiveFindManyArgs } from "./LiveFindManyArgs";
import { LiveWhereUniqueInput } from "./LiveWhereUniqueInput";
import { LiveUpdateInput } from "./LiveUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LiveControllerBase {
  constructor(
    protected readonly service: LiveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Live })
  @nestAccessControl.UseRoles({
    resource: "Live",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLive(@common.Body() data: LiveCreateInput): Promise<Live> {
    return await this.service.createLive({
      data: data,
      select: {
        awayGoals: true,
        awayScore: true,
        awayTeam: true,
        awayTeamBadge: true,
        createdAt: true,
        homeGoals: true,
        homeScore: true,
        homeTeam: true,
        homeTeamBadge: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Live] })
  @ApiNestedQuery(LiveFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Live",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async lives(@common.Req() request: Request): Promise<Live[]> {
    const args = plainToClass(LiveFindManyArgs, request.query);
    return this.service.lives({
      ...args,
      select: {
        awayGoals: true,
        awayScore: true,
        awayTeam: true,
        awayTeamBadge: true,
        createdAt: true,
        homeGoals: true,
        homeScore: true,
        homeTeam: true,
        homeTeamBadge: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Live })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Live",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async live(
    @common.Param() params: LiveWhereUniqueInput
  ): Promise<Live | null> {
    const result = await this.service.live({
      where: params,
      select: {
        awayGoals: true,
        awayScore: true,
        awayTeam: true,
        awayTeamBadge: true,
        createdAt: true,
        homeGoals: true,
        homeScore: true,
        homeTeam: true,
        homeTeamBadge: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Live })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Live",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLive(
    @common.Param() params: LiveWhereUniqueInput,
    @common.Body() data: LiveUpdateInput
  ): Promise<Live | null> {
    try {
      return await this.service.updateLive({
        where: params,
        data: data,
        select: {
          awayGoals: true,
          awayScore: true,
          awayTeam: true,
          awayTeamBadge: true,
          createdAt: true,
          homeGoals: true,
          homeScore: true,
          homeTeam: true,
          homeTeamBadge: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Live })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Live",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLive(
    @common.Param() params: LiveWhereUniqueInput
  ): Promise<Live | null> {
    try {
      return await this.service.deleteLive({
        where: params,
        select: {
          awayGoals: true,
          awayScore: true,
          awayTeam: true,
          awayTeamBadge: true,
          createdAt: true,
          homeGoals: true,
          homeScore: true,
          homeTeam: true,
          homeTeamBadge: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
