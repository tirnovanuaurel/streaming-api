/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Live } from "./Live";
import { LiveCountArgs } from "./LiveCountArgs";
import { LiveFindManyArgs } from "./LiveFindManyArgs";
import { LiveFindUniqueArgs } from "./LiveFindUniqueArgs";
import { CreateLiveArgs } from "./CreateLiveArgs";
import { UpdateLiveArgs } from "./UpdateLiveArgs";
import { DeleteLiveArgs } from "./DeleteLiveArgs";
import { LiveService } from "../live.service";
@graphql.Resolver(() => Live)
export class LiveResolverBase {
  constructor(protected readonly service: LiveService) {}

  async _livesMeta(
    @graphql.Args() args: LiveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Live])
  async lives(@graphql.Args() args: LiveFindManyArgs): Promise<Live[]> {
    return this.service.lives(args);
  }

  @graphql.Query(() => Live, { nullable: true })
  async live(@graphql.Args() args: LiveFindUniqueArgs): Promise<Live | null> {
    const result = await this.service.live(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Live)
  async createLive(@graphql.Args() args: CreateLiveArgs): Promise<Live> {
    return await this.service.createLive({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Live)
  async updateLive(@graphql.Args() args: UpdateLiveArgs): Promise<Live | null> {
    try {
      return await this.service.updateLive({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Live)
  async deleteLive(@graphql.Args() args: DeleteLiveArgs): Promise<Live | null> {
    try {
      return await this.service.deleteLive(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
