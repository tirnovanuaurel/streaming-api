/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TableService } from "../table.service";
import { TableCreateInput } from "./TableCreateInput";
import { Table } from "./Table";
import { TableFindManyArgs } from "./TableFindManyArgs";
import { TableWhereUniqueInput } from "./TableWhereUniqueInput";
import { TableUpdateInput } from "./TableUpdateInput";

export class TableControllerBase {
  constructor(protected readonly service: TableService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Table })
  async createTable(@common.Body() data: TableCreateInput): Promise<Table> {
    return await this.service.createTable({
      data: {
        ...data,

        competition: data.competition
          ? {
              connect: data.competition,
            }
          : undefined,

        team: data.team
          ? {
              connect: data.team,
            }
          : undefined,
      },
      select: {
        competition: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        drawn: true,
        goalsConceded: true,
        goalsDifference: true,
        goalsScored: true,
        id: true,
        lost: true,
        played: true,
        points: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        won: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Table] })
  @ApiNestedQuery(TableFindManyArgs)
  async tables(@common.Req() request: Request): Promise<Table[]> {
    const args = plainToClass(TableFindManyArgs, request.query);
    return this.service.tables({
      ...args,
      select: {
        competition: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        drawn: true,
        goalsConceded: true,
        goalsDifference: true,
        goalsScored: true,
        id: true,
        lost: true,
        played: true,
        points: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        won: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Table })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async table(
    @common.Param() params: TableWhereUniqueInput
  ): Promise<Table | null> {
    const result = await this.service.table({
      where: params,
      select: {
        competition: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        drawn: true,
        goalsConceded: true,
        goalsDifference: true,
        goalsScored: true,
        id: true,
        lost: true,
        played: true,
        points: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        won: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Table })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTable(
    @common.Param() params: TableWhereUniqueInput,
    @common.Body() data: TableUpdateInput
  ): Promise<Table | null> {
    try {
      return await this.service.updateTable({
        where: params,
        data: {
          ...data,

          competition: data.competition
            ? {
                connect: data.competition,
              }
            : undefined,

          team: data.team
            ? {
                connect: data.team,
              }
            : undefined,
        },
        select: {
          competition: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          drawn: true,
          goalsConceded: true,
          goalsDifference: true,
          goalsScored: true,
          id: true,
          lost: true,
          played: true,
          points: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          won: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Table })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTable(
    @common.Param() params: TableWhereUniqueInput
  ): Promise<Table | null> {
    try {
      return await this.service.deleteTable({
        where: params,
        select: {
          competition: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          drawn: true,
          goalsConceded: true,
          goalsDifference: true,
          goalsScored: true,
          id: true,
          lost: true,
          played: true,
          points: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          won: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
