/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Table, // @ts-ignore
  Team, // @ts-ignore
  Competition,
} from "@prisma/client";

export class TableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TableCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableCountArgs>
  ): Promise<number> {
    return this.prisma.table.count(args);
  }

  async tables<T extends Prisma.TableFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableFindManyArgs>
  ): Promise<Table[]> {
    return this.prisma.table.findMany(args);
  }
  async table<T extends Prisma.TableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableFindUniqueArgs>
  ): Promise<Table | null> {
    return this.prisma.table.findUnique(args);
  }
  async createTable<T extends Prisma.TableCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableCreateArgs>
  ): Promise<Table> {
    return this.prisma.table.create<T>(args);
  }
  async updateTable<T extends Prisma.TableUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableUpdateArgs>
  ): Promise<Table> {
    return this.prisma.table.update<T>(args);
  }
  async deleteTable<T extends Prisma.TableDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDeleteArgs>
  ): Promise<Table> {
    return this.prisma.table.delete(args);
  }

  async findTeam(
    parentId: string,
    args: Prisma.TeamFindManyArgs
  ): Promise<Team[]> {
    return this.prisma.table
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .team(args);
  }

  async getCompetition(parentId: string): Promise<Competition | null> {
    return this.prisma.table
      .findUnique({
        where: { id: parentId },
      })
      .competition();
  }
}
