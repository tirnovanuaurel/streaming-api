/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CompetitionWhereUniqueInput } from "../../competition/base/CompetitionWhereUniqueInput";
import { ValidateNested, IsOptional, IsInt } from "class-validator";
import { Type } from "class-transformer";
import { TeamCreateNestedManyWithoutTablesInput } from "./TeamCreateNestedManyWithoutTablesInput";

@InputType()
class TableCreateInput {
  @ApiProperty({
    required: false,
    type: () => CompetitionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CompetitionWhereUniqueInput)
  @IsOptional()
  @Field(() => CompetitionWhereUniqueInput, {
    nullable: true,
  })
  competition?: CompetitionWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  drawn!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  goalsConceded!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  goalsDifference!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  goalsScored!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  lost!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  played!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  points!: number;

  @ApiProperty({
    required: true,
    type: () => TeamCreateNestedManyWithoutTablesInput,
  })
  @ValidateNested()
  @Type(() => TeamCreateNestedManyWithoutTablesInput)
  @IsOptional()
  @Field(() => TeamCreateNestedManyWithoutTablesInput, {
    nullable: true,
  })
  team?: TeamCreateNestedManyWithoutTablesInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  won!: number;
}

export { TableCreateInput as TableCreateInput };
