/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppSetting } from "./AppSetting";
import { AppSettingCountArgs } from "./AppSettingCountArgs";
import { AppSettingFindManyArgs } from "./AppSettingFindManyArgs";
import { AppSettingFindUniqueArgs } from "./AppSettingFindUniqueArgs";
import { CreateAppSettingArgs } from "./CreateAppSettingArgs";
import { UpdateAppSettingArgs } from "./UpdateAppSettingArgs";
import { DeleteAppSettingArgs } from "./DeleteAppSettingArgs";
import { AppSettingService } from "../appSetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppSetting)
export class AppSettingResolverBase {
  constructor(
    protected readonly service: AppSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "read",
    possession: "any",
  })
  async _appSettingsMeta(
    @graphql.Args() args: AppSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppSetting])
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "read",
    possession: "any",
  })
  async appSettings(
    @graphql.Args() args: AppSettingFindManyArgs
  ): Promise<AppSetting[]> {
    return this.service.appSettings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "read",
    possession: "own",
  })
  async appSetting(
    @graphql.Args() args: AppSettingFindUniqueArgs
  ): Promise<AppSetting | null> {
    const result = await this.service.appSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppSetting)
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "create",
    possession: "any",
  })
  async createAppSetting(
    @graphql.Args() args: CreateAppSettingArgs
  ): Promise<AppSetting> {
    return await this.service.createAppSetting({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppSetting)
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "update",
    possession: "any",
  })
  async updateAppSetting(
    @graphql.Args() args: UpdateAppSettingArgs
  ): Promise<AppSetting | null> {
    try {
      return await this.service.updateAppSetting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppSetting)
  @nestAccessControl.UseRoles({
    resource: "AppSetting",
    action: "delete",
    possession: "any",
  })
  async deleteAppSetting(
    @graphql.Args() args: DeleteAppSettingArgs
  ): Promise<AppSetting | null> {
    try {
      return await this.service.deleteAppSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
